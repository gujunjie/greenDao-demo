package com.example.abc.myapplication47.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.abc.myapplication47.Collection;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLLECTION".
*/
public class CollectionDao extends AbstractDao<Collection, Long> {

    public static final String TABLENAME = "COLLECTION";

    /**
     * Properties of entity Collection.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CollectionId = new Property(1, Long.class, "collectionId", false, "COLLECTION_ID");
        public final static Property ImageUrl = new Property(2, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property ImageWidth = new Property(3, int.class, "imageWidth", false, "IMAGE_WIDTH");
        public final static Property ImageHeight = new Property(4, int.class, "imageHeight", false, "IMAGE_HEIGHT");
    }

    private Query<Collection> user_ListQuery;

    public CollectionDao(DaoConfig config) {
        super(config);
    }
    
    public CollectionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLLECTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"COLLECTION_ID\" INTEGER," + // 1: collectionId
                "\"IMAGE_URL\" TEXT," + // 2: imageUrl
                "\"IMAGE_WIDTH\" INTEGER NOT NULL ," + // 3: imageWidth
                "\"IMAGE_HEIGHT\" INTEGER NOT NULL );"); // 4: imageHeight
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLLECTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Collection entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long collectionId = entity.getCollectionId();
        if (collectionId != null) {
            stmt.bindLong(2, collectionId);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
        stmt.bindLong(4, entity.getImageWidth());
        stmt.bindLong(5, entity.getImageHeight());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Collection entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long collectionId = entity.getCollectionId();
        if (collectionId != null) {
            stmt.bindLong(2, collectionId);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
        stmt.bindLong(4, entity.getImageWidth());
        stmt.bindLong(5, entity.getImageHeight());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Collection readEntity(Cursor cursor, int offset) {
        Collection entity = new Collection( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // collectionId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imageUrl
            cursor.getInt(offset + 3), // imageWidth
            cursor.getInt(offset + 4) // imageHeight
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Collection entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCollectionId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setImageUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImageWidth(cursor.getInt(offset + 3));
        entity.setImageHeight(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Collection entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Collection entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Collection entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "list" to-many relationship of User. */
    public List<Collection> _queryUser_List(Long collectionId) {
        synchronized (this) {
            if (user_ListQuery == null) {
                QueryBuilder<Collection> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CollectionId.eq(null));
                user_ListQuery = queryBuilder.build();
            }
        }
        Query<Collection> query = user_ListQuery.forCurrentThread();
        query.setParameter(0, collectionId);
        return query.list();
    }

}
